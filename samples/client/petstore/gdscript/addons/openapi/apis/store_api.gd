extends HTTPRequest

# coding: utf-8

"""
    OpenAPI Petstore

    This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/OpenAPITools/openapi-generator.git
"""


export(String) var base_url
export(bool) var ssl_validate_domain = true

var username_cache
var token_cache
var request_type

var busy = false

const Order = preload("../Models/order.gd")

func compose_req(method : String, url : String, query_args : Dictionary, path_args : Dictionary, form_args : Dictionary, header_args : Dictionary, body_args : Dictionary, body = ""):
    var req = {}
    var final_url = base_url if base_url else ""

    # path arguments
    final_url += url.format(path_args)
    req.url = final_url

    var method_translate = {
        "GET": HTTPClient.METHOD_GET,
        "HEAD": HTTPClient.METHOD_HEAD,
        "POST": HTTPClient.METHOD_POST,
        "PUT": HTTPClient.METHOD_PUT,
        "DELETE": HTTPClient.METHOD_DELETE,
        "OPTIONS": HTTPClient.METHOD_OPTIONS,
        "TRACE": HTTPClient.METHOD_TRACE,
        "CONNECT": HTTPClient.METHOD_CONNECT,
        "PATCH": HTTPClient.METHOD_PATCH,
        "MAX": HTTPClient.METHOD_MAX
    }
    req.method = method_translate[method]

    # query arguments
    if !query_args.empty():
        final_url += "?"
        for i in query_args:
            if query_args[i] != null:
                final_url += "%s=%s&" % [i, str(query_args[i]).percent_encode()]
    req.url = final_url
    if !body.empty() &&  !body_args.empty():
        print("Both body_args and body are non-empty. Preferring body.")
    if !body.empty():
        req.data = body
    elif !body_args.empty():
        req.data = var2str(body_args)
    else:
        req.data = ""

    req.headers = [
    ]
    var headers = []
    var keys = form_args.keys();
    for key in keys:
      headers.push_back(String(key) + ": " + form_args[key]);
    if !headers.empty():
      req.headers.append(headers)
    # Authentication setting
    req.auth_settings = []
    return req

func get_username():
    return username_cache

func get_user_token():
    return token_cache

func _on_HTTPRequest_request_completed( result, response_code, headers, body ):
    busy = false
    emit_signal('api_' + request_type, body.get_string_from_ascii())


"""Delete purchase order by ID

For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
:param String order_id: ID of the order that needs to be deleted (required)
"""

signal api_delete_order(result)

func delete_order(p_order_id : String, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("DELETE",
    "/store/order/{orderId}".replace('{' + 'orderId' + '}', String(p_order_id).percent_encode()),
    {  },
    { "order_id" : p_order_id },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "delete_order"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Returns pet inventories by status

Returns a map of status codes to quantities
"""

signal api_get_inventory(result)

func get_inventory(kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/store/inventory",
    {  },
    {  },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "get_inventory"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Find purchase order by ID

For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
:param int order_id: ID of pet that needs to be fetched (required)
"""

signal api_get_order_by_id(result)

func get_order_by_id(p_order_id : int, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/store/order/{orderId}".replace('{' + 'orderId' + '}', String(p_order_id).percent_encode()),
    {  },
    { "order_id" : p_order_id },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "get_order_by_id"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Place an order for a pet

:param Order body: order placed for purchasing the pet (required)
"""

signal api_place_order(result)

func place_order(p_body : Order, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("POST",
    "/store/order",
    {  },
    {  },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "place_order"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
