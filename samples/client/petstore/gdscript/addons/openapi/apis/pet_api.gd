extends HTTPRequest

# coding: utf-8

"""
    OpenAPI Petstore

    This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/OpenAPITools/openapi-generator.git
"""


export(String) var base_url
export(bool) var ssl_validate_domain = true

var username_cache
var token_cache
var request_type

var busy = false

const ApiResponse = preload("../Models/api_response.gd")
const Pet = preload("../Models/pet.gd")

func compose_req(method : String, url : String, query_args : Dictionary, path_args : Dictionary, form_args : Dictionary, header_args : Dictionary, body_args : Dictionary, body = ""):
    var req = {}
    var final_url = base_url if base_url else ""

    # path arguments
    final_url += url.format(path_args)
    req.url = final_url

    var method_translate = {
        "GET": HTTPClient.METHOD_GET,
        "HEAD": HTTPClient.METHOD_HEAD,
        "POST": HTTPClient.METHOD_POST,
        "PUT": HTTPClient.METHOD_PUT,
        "DELETE": HTTPClient.METHOD_DELETE,
        "OPTIONS": HTTPClient.METHOD_OPTIONS,
        "TRACE": HTTPClient.METHOD_TRACE,
        "CONNECT": HTTPClient.METHOD_CONNECT,
        "PATCH": HTTPClient.METHOD_PATCH,
        "MAX": HTTPClient.METHOD_MAX
    }
    req.method = method_translate[method]

    # query arguments
    if !query_args.empty():
        final_url += "?"
        for i in query_args:
            if query_args[i] != null:
                final_url += "%s=%s&" % [i, str(query_args[i]).percent_encode()]
    req.url = final_url
    if !body.empty() &&  !body_args.empty():
        print("Both body_args and body are non-empty. Preferring body.")
    if !body.empty():
        req.data = body
    elif !body_args.empty():
        req.data = var2str(body_args)
    else:
        req.data = ""

    req.headers = [
    ]
    var headers = []
    var keys = form_args.keys();
    for key in keys:
      headers.push_back(String(key) + ": " + form_args[key]);
    if !headers.empty():
      req.headers.append(headers)
    # Authentication setting
    req.auth_settings = []
    return req

func get_username():
    return username_cache

func get_user_token():
    return token_cache

func _on_HTTPRequest_request_completed( result, response_code, headers, body ):
    busy = false
    emit_signal('api_' + request_type, body.get_string_from_ascii())


"""Add a new pet to the store

:param Pet body: Pet object that needs to be added to the store (required)
"""

signal api_add_pet(result)

func add_pet(p_body : Pet, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("POST",
    "/pet",
    {  },
    {  },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "add_pet"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Deletes a pet

:param int pet_id: Pet id to delete (required)
:param String api_key:
"""

signal api_delete_pet(result)

func delete_pet(p_pet_id : int, kwargs={}):
    if busy: return
    busy = true
    var api_key = kwargs['api_key']
    var req = compose_req("DELETE",
    "/pet/{petId}".replace('{' + 'petId' + '}', String(p_pet_id).percent_encode()),
    {  },
    { "pet_id" : p_pet_id },
    {  },
    { "api_key" : api_key },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "delete_pet"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Finds Pets by status

Multiple status values can be provided with comma separated strings
:param PoolStringArray status: Status values that need to be considered for filter (required)
"""

signal api_find_pets_by_status(result)

func find_pets_by_status(p_status : PoolStringArray, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/pet/findByStatus",
    { "status" : p_status },
    {  },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "find_pets_by_status"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Finds Pets by tags

Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
:param PoolStringArray tags: Tags to filter by (required)
"""

signal api_find_pets_by_tags(result)

func find_pets_by_tags(p_tags : PoolStringArray, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/pet/findByTags",
    { "tags" : p_tags },
    {  },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "find_pets_by_tags"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Find pet by ID

Returns a single pet
:param int pet_id: ID of pet to return (required)
"""

signal api_get_pet_by_id(result)

func get_pet_by_id(p_pet_id : int, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/pet/{petId}".replace('{' + 'petId' + '}', String(p_pet_id).percent_encode()),
    {  },
    { "pet_id" : p_pet_id },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "get_pet_by_id"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Update an existing pet

:param Pet body: Pet object that needs to be added to the store (required)
"""

signal api_update_pet(result)

func update_pet(p_body : Pet, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("PUT",
    "/pet",
    {  },
    {  },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "update_pet"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Updates a pet in the store with form data

:param int pet_id: ID of pet that needs to be updated (required)
:param String name: Updated name of the pet
:param String status: Updated status of the pet
"""

signal api_update_pet_with_form(result)

func update_pet_with_form(p_pet_id : int, kwargs={}):
    if busy: return
    busy = true
    var name = kwargs['name']
    var status = kwargs['status']
    var req = compose_req("POST",
    "/pet/{petId}".replace('{' + 'petId' + '}', String(p_pet_id).percent_encode()),
    {  },
    { "pet_id" : p_pet_id },
    { "name" : name, "status" : status },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "update_pet_with_form"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""uploads an image

:param int pet_id: ID of pet to update (required)
:param String additional_metadata: Additional data to pass to server
:param PoolByteArray file: file to upload
"""

signal api_upload_file(result)

func upload_file(p_pet_id : int, kwargs={}):
    if busy: return
    busy = true
    var additional_metadata = kwargs['additional_metadata']
    var file = kwargs['file']
    var req = compose_req("POST",
    "/pet/{petId}/uploadImage".replace('{' + 'petId' + '}', String(p_pet_id).percent_encode()),
    {  },
    { "pet_id" : p_pet_id },
    { "additional_metadata" : additional_metadata, "file" : file },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "upload_file"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
