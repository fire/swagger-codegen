extends HTTPRequest

# coding: utf-8

"""
    OpenAPI Petstore

    This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/OpenAPITools/openapi-generator.git
"""


export(String) var base_url
export(bool) var ssl_validate_domain = true

var username_cache
var token_cache
var request_type

var busy = false

const User = preload("../Models/user.gd")

func compose_req(method : String, url : String, query_args : Dictionary, path_args : Dictionary, form_args : Dictionary, header_args : Dictionary, body_args : Dictionary, body = ""):
    var req = {}
    var final_url = base_url if base_url else ""

    # path arguments
    final_url += url.format(path_args)
    req.url = final_url

    var method_translate = {
        "GET": HTTPClient.METHOD_GET,
        "HEAD": HTTPClient.METHOD_HEAD,
        "POST": HTTPClient.METHOD_POST,
        "PUT": HTTPClient.METHOD_PUT,
        "DELETE": HTTPClient.METHOD_DELETE,
        "OPTIONS": HTTPClient.METHOD_OPTIONS,
        "TRACE": HTTPClient.METHOD_TRACE,
        "CONNECT": HTTPClient.METHOD_CONNECT,
        "PATCH": HTTPClient.METHOD_PATCH,
        "MAX": HTTPClient.METHOD_MAX
    }
    req.method = method_translate[method]

    # query arguments
    if !query_args.empty():
        final_url += "?"
        for i in query_args:
            if query_args[i] != null:
                final_url += "%s=%s&" % [i, str(query_args[i]).percent_encode()]
    req.url = final_url
    if !body.empty() &&  !body_args.empty():
        print("Both body_args and body are non-empty. Preferring body.")
    if !body.empty():
        req.data = body
    elif !body_args.empty():
        req.data = var2str(body_args)
    else:
        req.data = ""

    req.headers = [
    ]
    var headers = []
    var keys = form_args.keys();
    for key in keys:
      headers.push_back(String(key) + ": " + form_args[key]);
    if !headers.empty():
      req.headers.append(headers)
    # Authentication setting
    req.auth_settings = []
    return req

func get_username():
    return username_cache

func get_user_token():
    return token_cache

func _on_HTTPRequest_request_completed( result, response_code, headers, body ):
    busy = false
    emit_signal('api_' + request_type, body.get_string_from_ascii())


"""Create user

This can only be done by the logged in user.
:param User body: Created user object (required)
"""

signal api_create_user(result)

func create_user(p_body : User, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("POST",
    "/user",
    {  },
    {  },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "create_user"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Creates list of users with given input array

:param Array body: List of user object (required)
"""

signal api_create_users_with_array_input(result)

func create_users_with_array_input(p_body : Array, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("POST",
    "/user/createWithArray",
    {  },
    {  },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "create_users_with_array_input"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Creates list of users with given input array

:param Array body: List of user object (required)
"""

signal api_create_users_with_list_input(result)

func create_users_with_list_input(p_body : Array, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("POST",
    "/user/createWithList",
    {  },
    {  },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "create_users_with_list_input"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Delete user

This can only be done by the logged in user.
:param String username: The name that needs to be deleted (required)
"""

signal api_delete_user(result)

func delete_user(p_username : String, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("DELETE",
    "/user/{username}".replace('{' + 'username' + '}', String(p_username).percent_encode()),
    {  },
    { "username" : p_username },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "delete_user"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Get user by user name

:param String username: The name that needs to be fetched. Use user1 for testing. (required)
"""

signal api_get_user_by_name(result)

func get_user_by_name(p_username : String, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/user/{username}".replace('{' + 'username' + '}', String(p_username).percent_encode()),
    {  },
    { "username" : p_username },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "get_user_by_name"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Logs user into the system

:param String username: The user name for login (required)
:param String password: The password for login in clear text (required)
"""

signal api_login_user(result)

func login_user(p_username : String, p_password : String, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/user/login",
    { "username" : p_username, "password" : p_password },
    {  },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "login_user"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Logs out current logged in user session

"""

signal api_logout_user(result)

func logout_user(kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("GET",
    "/user/logout",
    {  },
    {  },
    {  },
    {  },  {} )
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "logout_user"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)

"""Updated user

This can only be done by the logged in user.
:param String username: name that need to be deleted (required)
:param User body: Updated user object (required)
"""

signal api_update_user(result)

func update_user(p_username : String, p_body : User, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req("PUT",
    "/user/{username}".replace('{' + 'username' + '}', String(p_username).percent_encode()),
    {  },
    { "username" : p_username },
    {  },
    {  }, p_body.get_dict())
    connect("request_completed", self, "_on_HTTPRequest_request_completed")
    request_type = "update_user"
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
