extends HTTPRequest

# coding: utf-8

"""
    OpenAPI Petstore

    This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/OpenAPITools/openapi-generator.git
"""


export(String) var private_key
export(String) var game_id
export(String) var base_url
export(bool) var ssl_validate_domain
export(bool) var validate

var username_cache
var token_cache
var request_type

var busy = false

preload("../Models/api_response.gd")
preload("../Models/pet.gd")
preload("../Models/file.gd")

"""Add a new pet to the store

:param Pet body: Pet object that needs to be added to the store (required)
"""

signal api_add_pet(success)

func add_pet(__Pet__body, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('POST', '/pet', {  }, {  }, {  }, {  }, { Pet.dict })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Deletes a pet

:param int pet_id: Pet id to delete (required)
:param String api_key:
"""

signal api_delete_pet(success)

func delete_pet(__int__pet_id, kwargs={}):
    if busy: return
    busy = true
    var api_key = kwargs['api_key']
    var req = compose_req('DELETE', '/pet/{petId}', {  }, { pet_id=pet_id }, {  }, { api_key=api_key }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Finds Pets by status

Multiple status values can be provided with comma separated strings
:param List[String] status: Status values that need to be considered for filter (required)
"""

signal api_find_pets_by_status(success)

func find_pets_by_status(__List[String]__status, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('GET', '/pet/findByStatus', { status=status }, {  }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Finds Pets by tags

Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
:param List[String] tags: Tags to filter by (required)
"""

signal api_find_pets_by_tags(success)

func find_pets_by_tags(__List[String]__tags, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('GET', '/pet/findByTags', { tags=tags }, {  }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Find pet by ID

Returns a single pet
:param int pet_id: ID of pet to return (required)
"""

signal api_get_pet_by_id(success)

func get_pet_by_id(__int__pet_id, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('GET', '/pet/{petId}', {  }, { pet_id=pet_id }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Update an existing pet

:param Pet body: Pet object that needs to be added to the store (required)
"""

signal api_update_pet(success)

func update_pet(__Pet__body, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('PUT', '/pet', {  }, {  }, {  }, {  }, { Pet.dict })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Updates a pet in the store with form data

:param int pet_id: ID of pet that needs to be updated (required)
:param String name: Updated name of the pet
:param String status: Updated status of the pet
"""

signal api_update_pet_with_form(success)

func update_pet_with_form(__int__pet_id, kwargs={}):
    if busy: return
    busy = true
    var name = kwargs['name']
    var status = kwargs['status']
    var req = compose_req('POST', '/pet/{petId}', {  }, { pet_id=pet_id }, { name=name, status=status }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""uploads an image

:param int pet_id: ID of pet to update (required)
:param String additional_metadata: Additional data to pass to server
:param file file: file to upload
"""

signal api_upload_file(success)

func upload_file(__int__pet_id, kwargs={}):
    if busy: return
    busy = true
    var additional_metadata = kwargs['additional_metadata']
    var file = kwargs['file']
    var req = compose_req('POST', '/pet/{petId}/uploadImage', {  }, { pet_id=pet_id }, { additional_metadata=additional_metadata, file=file }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass





func compose_req(method, url, query_args, path_args, form_args, header_args, body_args, body = ""):
    var req = {}
    var final_url = base_url if base_url else ""

    # path arguments
    final_url += url.format(path_args)

    # query arguments
    if !query_args.empty():
        final_url += "?"
        for i in query_args:
            if query_args[i] != null:
                final_url += "%s=%s&" % [i, str(query_args[i]).percent_encode()]
    req.url = final_url
    if !body.empty() &&  !body_args.empty():
        print("Both body_args and body are non-empty. Preferring body.")
    if !body.empty():
        req.data = body
    elif !body_args.empty():
        req.data = var2str(body_args)
    req.headers = [
    ].append(header_args)
    # Authentication setting
    req.auth_settings = []
    return req
    pass

func get_username():
    return username_cache
    pass

func get_user_token():
    return token_cache
    pass

func _on_HTTPRequest_request_completed( result, response_code, headers, body ):
    busy = false
    emit_signal('api_' + request_type, body.get_string_from_ascii())
    pass # replace with function body

func _init():
    var id = "123"
    var create = "create_arg"
    var username = "username_arg"
    var tournament_id = "23331"
    var req = compose_req('PUT', '/v2/tournament/{tournament_id}', {create=create, username=username}, {tournament_id=tournament_id}, {}, {}, {id=id})
    print(req)
