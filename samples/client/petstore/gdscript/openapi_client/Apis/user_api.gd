extends HTTPRequest

# coding: utf-8

"""
    OpenAPI Petstore

    This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/OpenAPITools/openapi-generator.git
"""


export(String) var private_key
export(String) var game_id
export(String) var base_url
export(bool) var ssl_validate_domain
export(bool) var validate

var username_cache
var token_cache
var request_type

var busy = false

preload("../Models/user.gd")

"""Create user

This can only be done by the logged in user.
:param User body: Created user object (required)
"""

signal api_create_user(success)

func create_user(__User__body, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('POST', '/user', {  }, {  }, {  }, {  }, { User.dict })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Creates list of users with given input array

:param List[User] body: List of user object (required)
"""

signal api_create_users_with_array_input(success)

func create_users_with_array_input(__List[User]__body, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('POST', '/user/createWithArray', {  }, {  }, {  }, {  }, { List[User].dict })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Creates list of users with given input array

:param List[User] body: List of user object (required)
"""

signal api_create_users_with_list_input(success)

func create_users_with_list_input(__List[User]__body, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('POST', '/user/createWithList', {  }, {  }, {  }, {  }, { List[User].dict })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Delete user

This can only be done by the logged in user.
:param String username: The name that needs to be deleted (required)
"""

signal api_delete_user(success)

func delete_user(__String__username, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('DELETE', '/user/{username}', {  }, { username=username }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Get user by user name

:param String username: The name that needs to be fetched. Use user1 for testing. (required)
"""

signal api_get_user_by_name(success)

func get_user_by_name(__String__username, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('GET', '/user/{username}', {  }, { username=username }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Logs user into the system

:param String username: The user name for login (required)
:param String password: The password for login in clear text (required)
"""

signal api_login_user(success)

func login_user(__String__username, __String__password, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('GET', '/user/login', { username=username, password=password }, {  }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Logs out current logged in user session

"""

signal api_logout_user(success)

func logout_user(kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('GET', '/user/logout', {  }, {  }, {  }, {  }, {  })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


"""Updated user

This can only be done by the logged in user.
:param String username: name that need to be deleted (required)
:param User body: Updated user object (required)
"""

signal api_update_user(success)

func update_user(__String__username, __User__body, kwargs={}):
    if busy: return
    busy = true
    var req = compose_req('PUT', '/user/{username}', {  }, { username=username }, {  }, {  }, { User.dict })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass





func compose_req(method, url, query_args, path_args, form_args, header_args, body_args, body = ""):
    var req = {}
    var final_url = base_url if base_url else ""

    # path arguments
    final_url += url.format(path_args)

    # query arguments
    if !query_args.empty():
        final_url += "?"
        for i in query_args:
            if query_args[i] != null:
                final_url += "%s=%s&" % [i, str(query_args[i]).percent_encode()]
    req.url = final_url
    if !body.empty() &&  !body_args.empty():
        print("Both body_args and body are non-empty. Preferring body.")
    if !body.empty():
        req.data = body
    elif !body_args.empty():
        req.data = var2str(body_args)
    req.headers = [
    ].append(header_args)
    # Authentication setting
    req.auth_settings = []
    return req
    pass

func get_username():
    return username_cache
    pass

func get_user_token():
    return token_cache
    pass

func _on_HTTPRequest_request_completed( result, response_code, headers, body ):
    busy = false
    emit_signal('api_' + request_type, body.get_string_from_ascii())
    pass # replace with function body

func _init():
    var id = "123"
    var create = "create_arg"
    var username = "username_arg"
    var tournament_id = "23331"
    var req = compose_req('PUT', '/v2/tournament/{tournament_id}', {create=create, username=username}, {tournament_id=tournament_id}, {}, {}, {id=id})
    print(req)
