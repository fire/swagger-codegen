extends HTTPRequest

# coding: utf-8

{{>partial_header}}

export(String) var private_key
export(String) var game_id
export(String) var base_url
export(bool) var ssl_validate_domain
export(bool) var validate

var username_cache
var token_cache
var request_type

var busy = false

{{#imports}}{{{import}}}
{{/imports}}

{{#operations}}
{{#operation}}
"""{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}

{{#notes}}
{{{notes}}}
{{/notes}}
{{#allParams}}
:param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
{{/allParams}}
"""

signal api_{{operationId}}(success)

func {{operationId}}({{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}__{{dataType}}__{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}kwargs={}):
    if busy: return
    busy = true
    {{#allParams}}{{^required}}var {{paramName}} = kwargs['{{paramName}}']
    {{/required}}{{/allParams}}var req = compose_req('{{httpMethod}}', '{{{path}}}', { {{#queryParams}}{{paramName}}={{paramName}}{{^-last}}, {{/-last}}{{/queryParams}} }, { {{#pathParams}}{{paramName}}={{paramName}}{{^-last}}, {{/-last}}{{/pathParams}} }, { {{#formParams}}{{paramName}}={{paramName}}{{^-last}}, {{/-last}}{{/formParams}} }, { {{#headerParams}}{{paramName}}={{paramName}}{{^-last}}, {{/-last}}{{/headerParams}} }, { {{#bodyParams}}__{{dataType}}__dict{{#hasMore}}, {{/hasMore}}{{/bodyParams}} })
    request(req.url, req.headers, ssl_validate_domain, req.method, req.data)
    pass


{{/operation}}
{{/operations}}



func compose_req(method, url, query_args, path_args, form_args, header_args, body_args, body = ""):
    var req = {}
    var final_url = base_url if base_url else ""

    # path arguments
    final_url += url.format(path_args)

    # query arguments
    if !query_args.empty():
        final_url += "?"
        for i in query_args:
            if query_args[i] != null:
                final_url += "%s=%s&" % [i, str(query_args[i]).percent_encode()]
    req.url = final_url
    if !body.empty() &&  !body_args.empty():
        print("Both body_args and body are non-empty. Preferring body.")
    if !body.empty():
        req.data = body
    elif !body_args.empty():
        req.data = var2str(body_args)
    req.headers = [
       {{#hasProduces}}
        # HTTP header `Accept`
        'Accept: {{#produces}}{{{mediaType}}}{{#hasMore}},{{/hasMore}}{{/produces}}'
        {{/hasProduces}}
        {{#hasConsumes}}
        # HTTP header `Content-Type`
        'Content-Type: {{#consumes}}{{{mediaType}}}{{#hasMore}},{{/hasMore}}{{/consumes}}'
        {{/hasConsumes}}
    ].append(header_args)
    # Authentication setting
    req.auth_settings = [{{#authMethods}}'{{name}}'{{#hasMore}},{{/hasMore}}{{/authMethods}}]
    return req
    pass

func get_username():
    return username_cache
    pass

func get_user_token():
    return token_cache
    pass

func _on_HTTPRequest_request_completed( result, response_code, headers, body ):
    busy = false
    emit_signal('api_' + request_type, body.get_string_from_ascii())
    pass # replace with function body

func _init():
    var id = "123"
    var create = "create_arg"
    var username = "username_arg"
    var tournament_id = "23331"
    var req = compose_req('PUT', '/v2/tournament/{tournament_id}', {create=create, username=username}, {tournament_id=tournament_id}, {}, {}, {id=id})
    print(req)
